/*
Class Name:Node
Author's Name:
Date: 2/11/2016
Description of the class: Holds the information of the cost, Heu and Path, of the state, and the parent of the state 
*/
public class Node{
   private Node parent = null;
   private State state = null;
   private int pathCost = -1;
   private int heuristicCost = -1;
   private int totalCost = -1;
   private String rotateValue = "";

   /**************************************************
   Method Name: Node
   Input to the method: 
         Node, the parent of the node being created
         State, the state of the node being made
         int, the amout of transformation made from the init state to the current state
         int, the cost generated by the heurstic function
   Output(Return value): Node, a node with given parameters
   Brief description of the task: generates a node with all costs, and with the node it was generated from as parent
   Author:
   **************************************************/
   public Node(Node pNode, State myState, int gCost, int hCost, String rotate){
      this.setup(pNode, myState, gCost, hCost, rotate);
   }

   /**************************************************
   Method Name: Node
   Input to the method: 
         Node, the parent of the node being created
         State, the state of the node being made
         int, the cost generated by the heurstic function
   Output(Return value): Node, a node with given parameters
   Brief description of the task: generates a node with all costs, and with the node it was generated from as parent
         And the pathCost being generated from the parent node
   Author:
   **************************************************/
   public Node(Node pNode, State myState, int hCost, String rotate){
      this.setup(pNode, myState, (pNode.getPathCost() + 1), hCost, rotate);
   }

   /**************************************************
   Method Name: setup
   Input to the method: 
         Node, the parent of the node being created
         State, the state of the node being made
         int, the amout of transformation made from the init state to the current state
         int, the cost generated by the heurstic function
   Output(Return value): Node, a node with given parameters
   Brief description of the task: generates a node with all costs, and with the node it was generated from as parent
   Author:
   **************************************************/
   private void setup(Node pNode, State myState, int gCost, int hCost, String rotate){
      parent = pNode;
      state = myState;
      pathCost = gCost;
      heuristicCost = hCost;
      totalCost = gCost + hCost;   
      rotateValue = rotate;
   }

   /**************************************************
   Method Name: getState
   Input to the method: Void
   Output(Return value): State, the state given to the node
   Brief description of the task: the state currently held by the node
   Author:
   **************************************************/
   public State getState(){
      return state;
   }

   /**************************************************
   Method Name: getParent
   Input to the method: Void
   Output(Return value): Node, the parent node to the current
   Brief description of the task: the node that is 1 rotation away from the current state
   Author:
   **************************************************/
   public Node getParent(){
      return parent;
   }

   /**************************************************
   Method Name: getTotalCost
   Input to the method: Void
   Output(Return value): int, the pathCost + the Heurstic Cost
   Brief description of the task: the smart cost of the current node
   Author:
   **************************************************/
   public int getTotalCost(){
      return totalCost;
   }

   /**************************************************
   Method Name: getHeuCost
   Input to the method: Void
   Output(Return value): int, the the Heurstic Cost
   Brief description of the task: the value generated by the heurstic that was selected in AStar
   Author:
   **************************************************/
   public int getHeuCost(){
      return heuristicCost;
   }

   /**************************************************
   Method Name: getPathCost
   Input to the method: Void
   Output(Return value): int, the the Path Cost
   Brief description of the task: the amount of moves taken from the inital state to the to the current state
   Author:
   **************************************************/
   public int getPathCost(){
      return pathCost;
   }

   /**************************************************
   Method Name: isFinal
   Input to the method: Void
   Output(Return value): boolean, if the state is the final state
   Brief description of the task: compares all values to their previous, if all previous are less than current it is true
   Author:
   **************************************************/
   public boolean isFinal(){
      int past = state.board.get(0);
      int current;
      int i;
      
      for(i = 1; i < state.board.size(); i++){
         current = state.board.get(i);
         
         if(past > current){
            return false;
         }
         
         past = current;
      }
      
      return true;
   }

   /**************************************************
   Method Name: printPath
   Input to the method: Void
   Output(Return value): Void, output to console
   Brief description of the task: prints out all information about each parent node until root is reached
   Author:
   **************************************************/
   public void printPath(){
      String[] reversed = new String[pathCost+1];
      Node curNode = this;
      int count = 0;
      while(curNode != null){
         reversed[pathCost - count] = curNode.printNode();
         curNode = curNode.getParent();
         count++;
      }
      while(count > 0){
         count--;
         System.out.println(reversed[count]);
      }
      return;
   }

   /**************************************************
   Method Name: printNode
   Input to the method: Void
   Output(Return value): Void, output to console
   Brief description of the task: prints out all information about the node to the ocnsole
   Author:
   **************************************************/
   public String printNode(){
         return "State: " + state.getId() + 
                              " heu: " + heuristicCost + 
                              ", path: " + pathCost + 
                              ", total: " + totalCost +
                              "\nMove Made: " + rotateValue;
   }
}
